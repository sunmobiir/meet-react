// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file aqiModel.proto (package main, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Chat, Connection, MeetInfo, PanelUser, UserRoom } from "./model_pb.js";
import { RecordDbItem } from "./recorder_pb.js";

/**
 * @generated from message main.CreateMeetRequest
 */
export class CreateMeetRequest extends Message<CreateMeetRequest> {
  /**
   * @generated from field: string Title = 1;
   */
  Title = "";

  /**
   * @generated from field: bool UserNeedPass = 2;
   */
  UserNeedPass = false;

  /**
   * @generated from field: bool AdminNeedPass = 3;
   */
  AdminNeedPass = false;

  /**
   * @generated from field: string AdminPass = 4;
   */
  AdminPass = "";

  /**
   * @generated from field: string UserPass = 5;
   */
  UserPass = "";

  /**
   * @generated from field: int32 UserCount = 6;
   */
  UserCount = 0;

  /**
   * @generated from field: string OwnerID = 7;
   */
  OwnerID = "";

  /**
   * @generated from field: int32 ID = 8;
   */
  ID = 0;

  /**
   * @generated from field: bool RecordEnable = 9;
   */
  RecordEnable = false;

  constructor(data?: PartialMessage<CreateMeetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.CreateMeetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "UserNeedPass", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "AdminNeedPass", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "AdminPass", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "UserPass", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "UserCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "OwnerID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "ID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "RecordEnable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMeetRequest {
    return new CreateMeetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMeetRequest {
    return new CreateMeetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMeetRequest {
    return new CreateMeetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMeetRequest | PlainMessage<CreateMeetRequest> | undefined, b: CreateMeetRequest | PlainMessage<CreateMeetRequest> | undefined): boolean {
    return proto3.util.equals(CreateMeetRequest, a, b);
  }
}

/**
 * @generated from message main.CreateMeetResponse
 */
export class CreateMeetResponse extends Message<CreateMeetResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: int32 ID = 2;
   */
  ID = 0;

  /**
   * @generated from field: string Url = 3;
   */
  Url = "";

  /**
   * @generated from field: string Title = 4;
   */
  Title = "";

  /**
   * @generated from field: string Message = 5;
   */
  Message = "";

  constructor(data?: PartialMessage<CreateMeetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.CreateMeetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "Url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "Message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMeetResponse {
    return new CreateMeetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMeetResponse {
    return new CreateMeetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMeetResponse {
    return new CreateMeetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMeetResponse | PlainMessage<CreateMeetResponse> | undefined, b: CreateMeetResponse | PlainMessage<CreateMeetResponse> | undefined): boolean {
    return proto3.util.equals(CreateMeetResponse, a, b);
  }
}

/**
 * @generated from message main.MeetInfoRequest
 */
export class MeetInfoRequest extends Message<MeetInfoRequest> {
  /**
   * @generated from field: int32 ID = 1;
   */
  ID = 0;

  constructor(data?: PartialMessage<MeetInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.MeetInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetInfoRequest {
    return new MeetInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetInfoRequest {
    return new MeetInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetInfoRequest {
    return new MeetInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetInfoRequest | PlainMessage<MeetInfoRequest> | undefined, b: MeetInfoRequest | PlainMessage<MeetInfoRequest> | undefined): boolean {
    return proto3.util.equals(MeetInfoRequest, a, b);
  }
}

/**
 * @generated from message main.MeetInfoResponse
 */
export class MeetInfoResponse extends Message<MeetInfoResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: int32 ID = 2;
   */
  ID = 0;

  /**
   * @generated from field: bool UserNeedPass = 3;
   */
  UserNeedPass = false;

  /**
   * @generated from field: bool AdminNeedPass = 4;
   */
  AdminNeedPass = false;

  /**
   * @generated from field: string Title = 5;
   */
  Title = "";

  /**
   * @generated from field: string Message = 6;
   */
  Message = "";

  /**
   * @generated from field: main.MeetInfo Info = 7;
   */
  Info?: MeetInfo;

  constructor(data?: PartialMessage<MeetInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.MeetInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "UserNeedPass", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "AdminNeedPass", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "Title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "Message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "Info", kind: "message", T: MeetInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetInfoResponse {
    return new MeetInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetInfoResponse {
    return new MeetInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetInfoResponse {
    return new MeetInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MeetInfoResponse | PlainMessage<MeetInfoResponse> | undefined, b: MeetInfoResponse | PlainMessage<MeetInfoResponse> | undefined): boolean {
    return proto3.util.equals(MeetInfoResponse, a, b);
  }
}

/**
 * @generated from message main.RecordFileListRequest
 */
export class RecordFileListRequest extends Message<RecordFileListRequest> {
  /**
   * @generated from field: int32 Page = 1;
   */
  Page = 0;

  /**
   * @generated from field: int32 Size = 2;
   */
  Size = 0;

  /**
   * @generated from field: string SortBy = 3;
   */
  SortBy = "";

  /**
   * @generated from field: string SortDir = 4;
   */
  SortDir = "";

  /**
   * @generated from field: int32 MeetID = 5;
   */
  MeetID = 0;

  /**
   * @generated from field: string PanelUserID = 6;
   */
  PanelUserID = "";

  constructor(data?: PartialMessage<RecordFileListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.RecordFileListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "Size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "SortBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "SortDir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "MeetID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "PanelUserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordFileListRequest {
    return new RecordFileListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordFileListRequest {
    return new RecordFileListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordFileListRequest {
    return new RecordFileListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecordFileListRequest | PlainMessage<RecordFileListRequest> | undefined, b: RecordFileListRequest | PlainMessage<RecordFileListRequest> | undefined): boolean {
    return proto3.util.equals(RecordFileListRequest, a, b);
  }
}

/**
 * @generated from message main.RecordFileListResponse
 */
export class RecordFileListResponse extends Message<RecordFileListResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: int32 Count = 2;
   */
  Count = 0;

  /**
   * @generated from field: repeated main.RecordDbItem Data = 3;
   */
  Data: RecordDbItem[] = [];

  constructor(data?: PartialMessage<RecordFileListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.RecordFileListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "Data", kind: "message", T: RecordDbItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordFileListResponse {
    return new RecordFileListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordFileListResponse {
    return new RecordFileListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordFileListResponse {
    return new RecordFileListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RecordFileListResponse | PlainMessage<RecordFileListResponse> | undefined, b: RecordFileListResponse | PlainMessage<RecordFileListResponse> | undefined): boolean {
    return proto3.util.equals(RecordFileListResponse, a, b);
  }
}

/**
 * @generated from message main.ConnectionListRequest
 */
export class ConnectionListRequest extends Message<ConnectionListRequest> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: int32 Page = 2;
   */
  Page = 0;

  /**
   * @generated from field: int32 Size = 3;
   */
  Size = 0;

  /**
   * @generated from field: string SortBy = 4;
   */
  SortBy = "";

  /**
   * @generated from field: string SortDir = 5;
   */
  SortDir = "";

  /**
   * @generated from field: int32 MeetID = 6;
   */
  MeetID = 0;

  /**
   * @generated from field: string PanelUserID = 7;
   */
  PanelUserID = "";

  constructor(data?: PartialMessage<ConnectionListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ConnectionListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "Size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "SortBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "SortDir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "MeetID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "PanelUserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionListRequest {
    return new ConnectionListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionListRequest {
    return new ConnectionListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionListRequest {
    return new ConnectionListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionListRequest | PlainMessage<ConnectionListRequest> | undefined, b: ConnectionListRequest | PlainMessage<ConnectionListRequest> | undefined): boolean {
    return proto3.util.equals(ConnectionListRequest, a, b);
  }
}

/**
 * @generated from message main.ConnectionListResponse
 */
export class ConnectionListResponse extends Message<ConnectionListResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: int32 Count = 2;
   */
  Count = 0;

  /**
   * @generated from field: repeated main.Connection Data = 3;
   */
  Data: Connection[] = [];

  constructor(data?: PartialMessage<ConnectionListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ConnectionListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "Data", kind: "message", T: Connection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionListResponse {
    return new ConnectionListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionListResponse {
    return new ConnectionListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionListResponse {
    return new ConnectionListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionListResponse | PlainMessage<ConnectionListResponse> | undefined, b: ConnectionListResponse | PlainMessage<ConnectionListResponse> | undefined): boolean {
    return proto3.util.equals(ConnectionListResponse, a, b);
  }
}

/**
 * @generated from message main.ActiveMeetData
 */
export class ActiveMeetData extends Message<ActiveMeetData> {
  /**
   * @generated from field: int32 ID = 1;
   */
  ID = 0;

  /**
   * @generated from field: int32 OnlineUserCount = 2;
   */
  OnlineUserCount = 0;

  /**
   * @generated from field: string Title = 3;
   */
  Title = "";

  constructor(data?: PartialMessage<ActiveMeetData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ActiveMeetData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "OnlineUserCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "Title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveMeetData {
    return new ActiveMeetData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveMeetData {
    return new ActiveMeetData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveMeetData {
    return new ActiveMeetData().fromJsonString(jsonString, options);
  }

  static equals(a: ActiveMeetData | PlainMessage<ActiveMeetData> | undefined, b: ActiveMeetData | PlainMessage<ActiveMeetData> | undefined): boolean {
    return proto3.util.equals(ActiveMeetData, a, b);
  }
}

/**
 * @generated from message main.ActiveMeetsResponse
 */
export class ActiveMeetsResponse extends Message<ActiveMeetsResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: repeated main.ActiveMeetData Data = 2;
   */
  Data: ActiveMeetData[] = [];

  constructor(data?: PartialMessage<ActiveMeetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ActiveMeetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Data", kind: "message", T: ActiveMeetData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveMeetsResponse {
    return new ActiveMeetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveMeetsResponse {
    return new ActiveMeetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveMeetsResponse {
    return new ActiveMeetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ActiveMeetsResponse | PlainMessage<ActiveMeetsResponse> | undefined, b: ActiveMeetsResponse | PlainMessage<ActiveMeetsResponse> | undefined): boolean {
    return proto3.util.equals(ActiveMeetsResponse, a, b);
  }
}

/**
 * @generated from message main.ChatListRequest
 */
export class ChatListRequest extends Message<ChatListRequest> {
  /**
   * @generated from field: int32 MeetID = 1;
   */
  MeetID = 0;

  /**
   * @generated from field: int32 Page = 2;
   */
  Page = 0;

  /**
   * @generated from field: int32 Size = 3;
   */
  Size = 0;

  /**
   * @generated from field: string SortBy = 4;
   */
  SortBy = "";

  /**
   * @generated from field: string SortDir = 5;
   */
  SortDir = "";

  constructor(data?: PartialMessage<ChatListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ChatListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "MeetID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "Page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "Size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "SortBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "SortDir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatListRequest {
    return new ChatListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatListRequest {
    return new ChatListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatListRequest {
    return new ChatListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChatListRequest | PlainMessage<ChatListRequest> | undefined, b: ChatListRequest | PlainMessage<ChatListRequest> | undefined): boolean {
    return proto3.util.equals(ChatListRequest, a, b);
  }
}

/**
 * @generated from message main.ChatListResponse
 */
export class ChatListResponse extends Message<ChatListResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: int32 Count = 2;
   */
  Count = 0;

  /**
   * @generated from field: repeated main.Chat Data = 3;
   */
  Data: Chat[] = [];

  constructor(data?: PartialMessage<ChatListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ChatListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "Data", kind: "message", T: Chat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatListResponse {
    return new ChatListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatListResponse {
    return new ChatListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatListResponse {
    return new ChatListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChatListResponse | PlainMessage<ChatListResponse> | undefined, b: ChatListResponse | PlainMessage<ChatListResponse> | undefined): boolean {
    return proto3.util.equals(ChatListResponse, a, b);
  }
}

/**
 * @generated from message main.MeetListRequest
 */
export class MeetListRequest extends Message<MeetListRequest> {
  /**
   * @generated from field: int32 Page = 1;
   */
  Page = 0;

  /**
   * @generated from field: int32 Size = 2;
   */
  Size = 0;

  /**
   * @generated from field: string SortBy = 3;
   */
  SortBy = "";

  /**
   * @generated from field: string SortDir = 4;
   */
  SortDir = "";

  /**
   * @generated from field: string OwnerID = 5;
   */
  OwnerID = "";

  constructor(data?: PartialMessage<MeetListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.MeetListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "Size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "SortBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "SortDir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "OwnerID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetListRequest {
    return new MeetListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetListRequest {
    return new MeetListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetListRequest {
    return new MeetListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetListRequest | PlainMessage<MeetListRequest> | undefined, b: MeetListRequest | PlainMessage<MeetListRequest> | undefined): boolean {
    return proto3.util.equals(MeetListRequest, a, b);
  }
}

/**
 * @generated from message main.MeetListResponse
 */
export class MeetListResponse extends Message<MeetListResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: int32 Count = 2;
   */
  Count = 0;

  /**
   * @generated from field: repeated main.MeetInfo Data = 3;
   */
  Data: MeetInfo[] = [];

  constructor(data?: PartialMessage<MeetListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.MeetListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "Data", kind: "message", T: MeetInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetListResponse {
    return new MeetListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetListResponse {
    return new MeetListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetListResponse {
    return new MeetListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MeetListResponse | PlainMessage<MeetListResponse> | undefined, b: MeetListResponse | PlainMessage<MeetListResponse> | undefined): boolean {
    return proto3.util.equals(MeetListResponse, a, b);
  }
}

/**
 * @generated from message main.ParticipantListRequest
 */
export class ParticipantListRequest extends Message<ParticipantListRequest> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: int32 Page = 2;
   */
  Page = 0;

  /**
   * @generated from field: int32 Size = 3;
   */
  Size = 0;

  /**
   * @generated from field: string SortBy = 4;
   */
  SortBy = "";

  /**
   * @generated from field: string SortDir = 5;
   */
  SortDir = "";

  /**
   * @generated from field: int32 MeetID = 6;
   */
  MeetID = 0;

  /**
   * @generated from field: string PanelUserID = 7;
   */
  PanelUserID = "";

  constructor(data?: PartialMessage<ParticipantListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ParticipantListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "Size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "SortBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "SortDir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "MeetID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "PanelUserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantListRequest {
    return new ParticipantListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantListRequest {
    return new ParticipantListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantListRequest {
    return new ParticipantListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantListRequest | PlainMessage<ParticipantListRequest> | undefined, b: ParticipantListRequest | PlainMessage<ParticipantListRequest> | undefined): boolean {
    return proto3.util.equals(ParticipantListRequest, a, b);
  }
}

/**
 * @generated from message main.ParticipantListResponse
 */
export class ParticipantListResponse extends Message<ParticipantListResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: int32 Count = 2;
   */
  Count = 0;

  /**
   * @generated from field: repeated main.UserRoom Data = 3;
   */
  Data: UserRoom[] = [];

  constructor(data?: PartialMessage<ParticipantListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ParticipantListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "Data", kind: "message", T: UserRoom, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantListResponse {
    return new ParticipantListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantListResponse {
    return new ParticipantListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantListResponse {
    return new ParticipantListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantListResponse | PlainMessage<ParticipantListResponse> | undefined, b: ParticipantListResponse | PlainMessage<ParticipantListResponse> | undefined): boolean {
    return proto3.util.equals(ParticipantListResponse, a, b);
  }
}

/**
 * @generated from message main.JoinRequest
 */
export class JoinRequest extends Message<JoinRequest> {
  /**
   * @generated from field: int32 MeetID = 1;
   */
  MeetID = 0;

  /**
   * @generated from field: string UserName = 2;
   */
  UserName = "";

  /**
   * @generated from field: int32 JoinRole = 3;
   */
  JoinRole = 0;

  /**
   * @generated from field: string Pass = 4;
   */
  Pass = "";

  constructor(data?: PartialMessage<JoinRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.JoinRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "MeetID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "JoinRole", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "Pass", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinRequest {
    return new JoinRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinRequest {
    return new JoinRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinRequest {
    return new JoinRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JoinRequest | PlainMessage<JoinRequest> | undefined, b: JoinRequest | PlainMessage<JoinRequest> | undefined): boolean {
    return proto3.util.equals(JoinRequest, a, b);
  }
}

/**
 * @generated from message main.JoinResponse
 */
export class JoinResponse extends Message<JoinResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: string PID = 2;
   */
  PID = "";

  /**
   * @generated from field: string Message = 3;
   */
  Message = "";

  /**
   * @generated from field: string Url = 4;
   */
  Url = "";

  constructor(data?: PartialMessage<JoinResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.JoinResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "PID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinResponse {
    return new JoinResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinResponse {
    return new JoinResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinResponse {
    return new JoinResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JoinResponse | PlainMessage<JoinResponse> | undefined, b: JoinResponse | PlainMessage<JoinResponse> | undefined): boolean {
    return proto3.util.equals(JoinResponse, a, b);
  }
}

/**
 * @generated from message main.JoinByLatestInfoRequest
 */
export class JoinByLatestInfoRequest extends Message<JoinByLatestInfoRequest> {
  /**
   * @generated from field: string PID = 1;
   */
  PID = "";

  /**
   * @generated from field: string UserName = 2;
   */
  UserName = "";

  /**
   * @generated from field: int32 JoinRole = 3;
   */
  JoinRole = 0;

  /**
   * @generated from field: string Pass = 4;
   */
  Pass = "";

  constructor(data?: PartialMessage<JoinByLatestInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.JoinByLatestInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "PID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "JoinRole", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "Pass", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinByLatestInfoRequest {
    return new JoinByLatestInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinByLatestInfoRequest {
    return new JoinByLatestInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinByLatestInfoRequest {
    return new JoinByLatestInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JoinByLatestInfoRequest | PlainMessage<JoinByLatestInfoRequest> | undefined, b: JoinByLatestInfoRequest | PlainMessage<JoinByLatestInfoRequest> | undefined): boolean {
    return proto3.util.equals(JoinByLatestInfoRequest, a, b);
  }
}

/**
 * @generated from message main.JoinByLatestInfoResponse
 */
export class JoinByLatestInfoResponse extends Message<JoinByLatestInfoResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: string MeetName = 2;
   */
  MeetName = "";

  constructor(data?: PartialMessage<JoinByLatestInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.JoinByLatestInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "MeetName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinByLatestInfoResponse {
    return new JoinByLatestInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinByLatestInfoResponse {
    return new JoinByLatestInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinByLatestInfoResponse {
    return new JoinByLatestInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JoinByLatestInfoResponse | PlainMessage<JoinByLatestInfoResponse> | undefined, b: JoinByLatestInfoResponse | PlainMessage<JoinByLatestInfoResponse> | undefined): boolean {
    return proto3.util.equals(JoinByLatestInfoResponse, a, b);
  }
}

/**
 * @generated from message main.CreateParticipantRequest
 */
export class CreateParticipantRequest extends Message<CreateParticipantRequest> {
  /**
   * @generated from field: int32 MeetID = 1;
   */
  MeetID = 0;

  /**
   * @generated from field: string UserName = 2;
   */
  UserName = "";

  /**
   * @generated from field: int32 JoinRole = 3;
   */
  JoinRole = 0;

  /**
   * @generated from field: string BrowserID = 4;
   */
  BrowserID = "";

  /**
   * @generated from field: bool IsHidden = 5;
   */
  IsHidden = false;

  constructor(data?: PartialMessage<CreateParticipantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.CreateParticipantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "MeetID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "JoinRole", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "BrowserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "IsHidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateParticipantRequest {
    return new CreateParticipantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateParticipantRequest {
    return new CreateParticipantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateParticipantRequest {
    return new CreateParticipantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateParticipantRequest | PlainMessage<CreateParticipantRequest> | undefined, b: CreateParticipantRequest | PlainMessage<CreateParticipantRequest> | undefined): boolean {
    return proto3.util.equals(CreateParticipantRequest, a, b);
  }
}

/**
 * @generated from message main.CreateParticipantResponse
 */
export class CreateParticipantResponse extends Message<CreateParticipantResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: string ID = 2;
   */
  ID = "";

  /**
   * @generated from field: string PID = 3;
   */
  PID = "";

  /**
   * @generated from field: string Url = 4;
   */
  Url = "";

  constructor(data?: PartialMessage<CreateParticipantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.CreateParticipantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "PID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateParticipantResponse {
    return new CreateParticipantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateParticipantResponse {
    return new CreateParticipantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateParticipantResponse {
    return new CreateParticipantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateParticipantResponse | PlainMessage<CreateParticipantResponse> | undefined, b: CreateParticipantResponse | PlainMessage<CreateParticipantResponse> | undefined): boolean {
    return proto3.util.equals(CreateParticipantResponse, a, b);
  }
}

/**
 * @generated from message main.GetParticipantRequest
 */
export class GetParticipantRequest extends Message<GetParticipantRequest> {
  /**
   * @generated from field: string PID = 1;
   */
  PID = "";

  constructor(data?: PartialMessage<GetParticipantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.GetParticipantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "PID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetParticipantRequest {
    return new GetParticipantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetParticipantRequest {
    return new GetParticipantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetParticipantRequest {
    return new GetParticipantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetParticipantRequest | PlainMessage<GetParticipantRequest> | undefined, b: GetParticipantRequest | PlainMessage<GetParticipantRequest> | undefined): boolean {
    return proto3.util.equals(GetParticipantRequest, a, b);
  }
}

/**
 * @generated from message main.GetParticipantResponse
 */
export class GetParticipantResponse extends Message<GetParticipantResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: main.UserRoom Participant = 2;
   */
  Participant?: UserRoom;

  constructor(data?: PartialMessage<GetParticipantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.GetParticipantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Participant", kind: "message", T: UserRoom },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetParticipantResponse {
    return new GetParticipantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetParticipantResponse {
    return new GetParticipantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetParticipantResponse {
    return new GetParticipantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetParticipantResponse | PlainMessage<GetParticipantResponse> | undefined, b: GetParticipantResponse | PlainMessage<GetParticipantResponse> | undefined): boolean {
    return proto3.util.equals(GetParticipantResponse, a, b);
  }
}

/**
 * @generated from message main.RegisterRequest
 */
export class RegisterRequest extends Message<RegisterRequest> {
  /**
   * @generated from field: string Name = 1;
   */
  Name = "";

  /**
   * @generated from field: string UserName = 2;
   */
  UserName = "";

  /**
   * @generated from field: string Password = 3;
   */
  Password = "";

  constructor(data?: PartialMessage<RegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.RegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRequest {
    return new RegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRequest {
    return new RegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRequest {
    return new RegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRequest | PlainMessage<RegisterRequest> | undefined, b: RegisterRequest | PlainMessage<RegisterRequest> | undefined): boolean {
    return proto3.util.equals(RegisterRequest, a, b);
  }
}

/**
 * @generated from message main.RegisterResponse
 */
export class RegisterResponse extends Message<RegisterResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: string ID = 2;
   */
  ID = "";

  /**
   * @generated from field: string GUID = 3;
   */
  GUID = "";

  /**
   * @generated from field: string Name = 4;
   */
  Name = "";

  /**
   * @generated from field: string UserName = 5;
   */
  UserName = "";

  /**
   * @generated from field: int32 Role = 6;
   */
  Role = 0;

  constructor(data?: PartialMessage<RegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.RegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "GUID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "Role", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterResponse {
    return new RegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterResponse {
    return new RegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterResponse {
    return new RegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterResponse | PlainMessage<RegisterResponse> | undefined, b: RegisterResponse | PlainMessage<RegisterResponse> | undefined): boolean {
    return proto3.util.equals(RegisterResponse, a, b);
  }
}

/**
 * @generated from message main.EditPanelUserRequest
 */
export class EditPanelUserRequest extends Message<EditPanelUserRequest> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string GUID = 2;
   */
  GUID = "";

  /**
   * @generated from field: string Name = 3;
   */
  Name = "";

  /**
   * @generated from field: string UserName = 4;
   */
  UserName = "";

  /**
   * @generated from field: string Password = 5;
   */
  Password = "";

  /**
   * @generated from field: int32 EditMyAccount = 6;
   */
  EditMyAccount = 0;

  constructor(data?: PartialMessage<EditPanelUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.EditPanelUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "GUID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "Password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "EditMyAccount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditPanelUserRequest {
    return new EditPanelUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditPanelUserRequest {
    return new EditPanelUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditPanelUserRequest {
    return new EditPanelUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EditPanelUserRequest | PlainMessage<EditPanelUserRequest> | undefined, b: EditPanelUserRequest | PlainMessage<EditPanelUserRequest> | undefined): boolean {
    return proto3.util.equals(EditPanelUserRequest, a, b);
  }
}

/**
 * @generated from message main.EditPanelUserResponse
 */
export class EditPanelUserResponse extends Message<EditPanelUserResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: string ID = 2;
   */
  ID = "";

  /**
   * @generated from field: string GUID = 3;
   */
  GUID = "";

  /**
   * @generated from field: string Name = 4;
   */
  Name = "";

  /**
   * @generated from field: string UserName = 5;
   */
  UserName = "";

  /**
   * @generated from field: int32 Role = 6;
   */
  Role = 0;

  /**
   * @generated from field: int32 EditMyAccount = 7;
   */
  EditMyAccount = 0;

  constructor(data?: PartialMessage<EditPanelUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.EditPanelUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "GUID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "Role", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "EditMyAccount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditPanelUserResponse {
    return new EditPanelUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditPanelUserResponse {
    return new EditPanelUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditPanelUserResponse {
    return new EditPanelUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EditPanelUserResponse | PlainMessage<EditPanelUserResponse> | undefined, b: EditPanelUserResponse | PlainMessage<EditPanelUserResponse> | undefined): boolean {
    return proto3.util.equals(EditPanelUserResponse, a, b);
  }
}

/**
 * @generated from message main.LoginRequest
 */
export class LoginRequest extends Message<LoginRequest> {
  /**
   * @generated from field: string UserName = 1;
   */
  UserName = "";

  /**
   * @generated from field: string Password = 2;
   */
  Password = "";

  constructor(data?: PartialMessage<LoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.LoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest {
    return new LoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginRequest | PlainMessage<LoginRequest> | undefined, b: LoginRequest | PlainMessage<LoginRequest> | undefined): boolean {
    return proto3.util.equals(LoginRequest, a, b);
  }
}

/**
 * @generated from message main.LoginResponse
 */
export class LoginResponse extends Message<LoginResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: string ID = 2;
   */
  ID = "";

  /**
   * @generated from field: string GUID = 3;
   */
  GUID = "";

  /**
   * @generated from field: string Name = 4;
   */
  Name = "";

  /**
   * @generated from field: string UserName = 5;
   */
  UserName = "";

  /**
   * @generated from field: int32 Role = 6;
   */
  Role = 0;

  constructor(data?: PartialMessage<LoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.LoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "GUID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "Role", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse {
    return new LoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginResponse | PlainMessage<LoginResponse> | undefined, b: LoginResponse | PlainMessage<LoginResponse> | undefined): boolean {
    return proto3.util.equals(LoginResponse, a, b);
  }
}

/**
 * @generated from message main.PanelUserListRequest
 */
export class PanelUserListRequest extends Message<PanelUserListRequest> {
  /**
   * @generated from field: int32 Page = 1;
   */
  Page = 0;

  /**
   * @generated from field: int32 Size = 2;
   */
  Size = 0;

  /**
   * @generated from field: string SortBy = 3;
   */
  SortBy = "";

  /**
   * @generated from field: string SortDir = 4;
   */
  SortDir = "";

  constructor(data?: PartialMessage<PanelUserListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.PanelUserListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "Size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "SortBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "SortDir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PanelUserListRequest {
    return new PanelUserListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PanelUserListRequest {
    return new PanelUserListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PanelUserListRequest {
    return new PanelUserListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PanelUserListRequest | PlainMessage<PanelUserListRequest> | undefined, b: PanelUserListRequest | PlainMessage<PanelUserListRequest> | undefined): boolean {
    return proto3.util.equals(PanelUserListRequest, a, b);
  }
}

/**
 * @generated from message main.PanelUserListResponse
 */
export class PanelUserListResponse extends Message<PanelUserListResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: int32 Count = 2;
   */
  Count = 0;

  /**
   * @generated from field: repeated main.PanelUser Data = 3;
   */
  Data: PanelUser[] = [];

  constructor(data?: PartialMessage<PanelUserListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.PanelUserListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "Data", kind: "message", T: PanelUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PanelUserListResponse {
    return new PanelUserListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PanelUserListResponse {
    return new PanelUserListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PanelUserListResponse {
    return new PanelUserListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PanelUserListResponse | PlainMessage<PanelUserListResponse> | undefined, b: PanelUserListResponse | PlainMessage<PanelUserListResponse> | undefined): boolean {
    return proto3.util.equals(PanelUserListResponse, a, b);
  }
}

/**
 * @generated from message main.ChangePasswordRequest
 */
export class ChangePasswordRequest extends Message<ChangePasswordRequest> {
  /**
   * @generated from field: string Password = 3;
   */
  Password = "";

  constructor(data?: PartialMessage<ChangePasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ChangePasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "Password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangePasswordRequest {
    return new ChangePasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangePasswordRequest {
    return new ChangePasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangePasswordRequest {
    return new ChangePasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangePasswordRequest | PlainMessage<ChangePasswordRequest> | undefined, b: ChangePasswordRequest | PlainMessage<ChangePasswordRequest> | undefined): boolean {
    return proto3.util.equals(ChangePasswordRequest, a, b);
  }
}

/**
 * @generated from message main.ChangePasswordResponse
 */
export class ChangePasswordResponse extends Message<ChangePasswordResponse> {
  /**
   * @generated from field: string Status = 1;
   */
  Status = "";

  /**
   * @generated from field: main.PanelUser User = 2;
   */
  User?: PanelUser;

  constructor(data?: PartialMessage<ChangePasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ChangePasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "User", kind: "message", T: PanelUser },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangePasswordResponse {
    return new ChangePasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangePasswordResponse {
    return new ChangePasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangePasswordResponse {
    return new ChangePasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangePasswordResponse | PlainMessage<ChangePasswordResponse> | undefined, b: ChangePasswordResponse | PlainMessage<ChangePasswordResponse> | undefined): boolean {
    return proto3.util.equals(ChangePasswordResponse, a, b);
  }
}

