// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file quiz.proto (package main, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message main.QuizModel
 */
export class QuizModel extends Message<QuizModel> {
  /**
   * @generated from field: map<int32, main.QuizQuestionModel> questions = 1;
   */
  questions: { [key: number]: QuizQuestionModel } = {};

  /**
   * @generated from field: map<int32, main.UsersAnswer> full_users_answer = 2;
   */
  fullUsersAnswer: { [key: number]: UsersAnswer } = {};

  constructor(data?: PartialMessage<QuizModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.QuizModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "questions", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: QuizQuestionModel} },
    { no: 2, name: "full_users_answer", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: UsersAnswer} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuizModel {
    return new QuizModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuizModel {
    return new QuizModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuizModel {
    return new QuizModel().fromJsonString(jsonString, options);
  }

  static equals(a: QuizModel | PlainMessage<QuizModel> | undefined, b: QuizModel | PlainMessage<QuizModel> | undefined): boolean {
    return proto3.util.equals(QuizModel, a, b);
  }
}

/**
 * @generated from message main.UsersAnswer
 */
export class UsersAnswer extends Message<UsersAnswer> {
  /**
   * @generated from field: int32 qid = 1;
   */
  qid = 0;

  /**
   * @generated from field: map<string, main.QuizUserAnswerResponse> answers = 2;
   */
  answers: { [key: string]: QuizUserAnswerResponse } = {};

  constructor(data?: PartialMessage<UsersAnswer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.UsersAnswer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "qid", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "answers", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: QuizUserAnswerResponse} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersAnswer {
    return new UsersAnswer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersAnswer {
    return new UsersAnswer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersAnswer {
    return new UsersAnswer().fromJsonString(jsonString, options);
  }

  static equals(a: UsersAnswer | PlainMessage<UsersAnswer> | undefined, b: UsersAnswer | PlainMessage<UsersAnswer> | undefined): boolean {
    return proto3.util.equals(UsersAnswer, a, b);
  }
}

/**
 * @generated from message main.QuizQuestionModel
 */
export class QuizQuestionModel extends Message<QuizQuestionModel> {
  /**
   * @generated from field: int32 qid = 1;
   */
  qid = 0;

  /**
   * @generated from field: string body = 2;
   */
  body = "";

  /**
   * @generated from field: string option1 = 3;
   */
  option1 = "";

  /**
   * @generated from field: string option2 = 4;
   */
  option2 = "";

  /**
   * @generated from field: string option3 = 5;
   */
  option3 = "";

  /**
   * @generated from field: string option4 = 6;
   */
  option4 = "";

  /**
   * @generated from field: bool deleted = 7;
   */
  deleted = false;

  /**
   * @generated from field: string ownerId = 8;
   */
  ownerId = "";

  constructor(data?: PartialMessage<QuizQuestionModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.QuizQuestionModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "qid", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "option1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "option2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "option3", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "option4", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "ownerId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuizQuestionModel {
    return new QuizQuestionModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuizQuestionModel {
    return new QuizQuestionModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuizQuestionModel {
    return new QuizQuestionModel().fromJsonString(jsonString, options);
  }

  static equals(a: QuizQuestionModel | PlainMessage<QuizQuestionModel> | undefined, b: QuizQuestionModel | PlainMessage<QuizQuestionModel> | undefined): boolean {
    return proto3.util.equals(QuizQuestionModel, a, b);
  }
}

/**
 * @generated from message main.QuizTotalAnswer
 */
export class QuizTotalAnswer extends Message<QuizTotalAnswer> {
  /**
   * @generated from field: int32 qid = 1;
   */
  qid = 0;

  /**
   * @generated from field: int32 count1 = 2;
   */
  count1 = 0;

  /**
   * @generated from field: int32 count2 = 3;
   */
  count2 = 0;

  /**
   * @generated from field: int32 count3 = 4;
   */
  count3 = 0;

  /**
   * @generated from field: int32 count4 = 5;
   */
  count4 = 0;

  constructor(data?: PartialMessage<QuizTotalAnswer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.QuizTotalAnswer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "qid", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "count1", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "count2", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "count3", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "count4", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuizTotalAnswer {
    return new QuizTotalAnswer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuizTotalAnswer {
    return new QuizTotalAnswer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuizTotalAnswer {
    return new QuizTotalAnswer().fromJsonString(jsonString, options);
  }

  static equals(a: QuizTotalAnswer | PlainMessage<QuizTotalAnswer> | undefined, b: QuizTotalAnswer | PlainMessage<QuizTotalAnswer> | undefined): boolean {
    return proto3.util.equals(QuizTotalAnswer, a, b);
  }
}

/**
 * @generated from message main.QuizUserAnswerRequest
 */
export class QuizUserAnswerRequest extends Message<QuizUserAnswerRequest> {
  /**
   * @generated from field: int32 qid = 1;
   */
  qid = 0;

  /**
   * @generated from field: int32 answer = 2;
   */
  answer = 0;

  constructor(data?: PartialMessage<QuizUserAnswerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.QuizUserAnswerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "qid", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "answer", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuizUserAnswerRequest {
    return new QuizUserAnswerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuizUserAnswerRequest {
    return new QuizUserAnswerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuizUserAnswerRequest {
    return new QuizUserAnswerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuizUserAnswerRequest | PlainMessage<QuizUserAnswerRequest> | undefined, b: QuizUserAnswerRequest | PlainMessage<QuizUserAnswerRequest> | undefined): boolean {
    return proto3.util.equals(QuizUserAnswerRequest, a, b);
  }
}

/**
 * @generated from message main.QuizUserAnswerResponse
 */
export class QuizUserAnswerResponse extends Message<QuizUserAnswerResponse> {
  /**
   * @generated from field: int32 qid = 1;
   */
  qid = 0;

  /**
   * @generated from field: int32 answer = 2;
   */
  answer = 0;

  /**
   * @generated from field: string user_name = 3;
   */
  userName = "";

  /**
   * @generated from field: string user_id = 4;
   */
  userId = "";

  constructor(data?: PartialMessage<QuizUserAnswerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.QuizUserAnswerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "qid", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "answer", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuizUserAnswerResponse {
    return new QuizUserAnswerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuizUserAnswerResponse {
    return new QuizUserAnswerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuizUserAnswerResponse {
    return new QuizUserAnswerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuizUserAnswerResponse | PlainMessage<QuizUserAnswerResponse> | undefined, b: QuizUserAnswerResponse | PlainMessage<QuizUserAnswerResponse> | undefined): boolean {
    return proto3.util.equals(QuizUserAnswerResponse, a, b);
  }
}

/**
 * @generated from message main.QuizUtils
 */
export class QuizUtils extends Message<QuizUtils> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: int32 qid = 2;
   */
  qid = 0;

  constructor(data?: PartialMessage<QuizUtils>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.QuizUtils";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "qid", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuizUtils {
    return new QuizUtils().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuizUtils {
    return new QuizUtils().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuizUtils {
    return new QuizUtils().fromJsonString(jsonString, options);
  }

  static equals(a: QuizUtils | PlainMessage<QuizUtils> | undefined, b: QuizUtils | PlainMessage<QuizUtils> | undefined): boolean {
    return proto3.util.equals(QuizUtils, a, b);
  }
}

/**
 * @generated from message main.QuizShowResult
 */
export class QuizShowResult extends Message<QuizShowResult> {
  constructor(data?: PartialMessage<QuizShowResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.QuizShowResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuizShowResult {
    return new QuizShowResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuizShowResult {
    return new QuizShowResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuizShowResult {
    return new QuizShowResult().fromJsonString(jsonString, options);
  }

  static equals(a: QuizShowResult | PlainMessage<QuizShowResult> | undefined, b: QuizShowResult | PlainMessage<QuizShowResult> | undefined): boolean {
    return proto3.util.equals(QuizShowResult, a, b);
  }
}

