// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file model.proto (package main, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum main.ChatMessageType
 */
export enum ChatMessageType {
  /**
   * @generated from enum value: new = 0;
   */
  new = 0,

  /**
   * @generated from enum value: delete = 1;
   */
  delete = 1,

  /**
   * @generated from enum value: edit = 2;
   */
  edit = 2,

  /**
   * @generated from enum value: reply = 3;
   */
  reply = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ChatMessageType)
proto3.util.setEnumType(ChatMessageType, "main.ChatMessageType", [
  { no: 0, name: "new" },
  { no: 1, name: "delete" },
  { no: 2, name: "edit" },
  { no: 3, name: "reply" },
]);

/**
 * @generated from enum main.PwaMessageType
 */
export enum PwaMessageType {
  /**
   * @generated from enum value: update = 0;
   */
  update = 0,

  /**
   * @generated from enum value: updates = 1;
   */
  updates = 1,

  /**
   * @generated from enum value: SelectDoc = 2;
   */
  SelectDoc = 2,

  /**
   * @generated from enum value: init = 3;
   */
  init = 3,

  /**
   * @generated from enum value: fullDoc = 4;
   */
  fullDoc = 4,

  /**
   * @generated from enum value: quickEdgeless = 5;
   */
  quickEdgeless = 5,

  /**
   * @generated from enum value: awareness = 6;
   */
  awareness = 6,

  /**
   * @generated from enum value: createDoc = 7;
   */
  createDoc = 7,

  /**
   * @generated from enum value: editMode = 8;
   */
  editMode = 8,

  /**
   * @generated from enum value: docCallback = 9;
   */
  docCallback = 9,

  /**
   * @generated from enum value: snapshotCallback = 10;
   */
  snapshotCallback = 10,

  /**
   * @generated from enum value: updateIdError = 11;
   */
  updateIdError = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(PwaMessageType)
proto3.util.setEnumType(PwaMessageType, "main.PwaMessageType", [
  { no: 0, name: "update" },
  { no: 1, name: "updates" },
  { no: 2, name: "SelectDoc" },
  { no: 3, name: "init" },
  { no: 4, name: "fullDoc" },
  { no: 5, name: "quickEdgeless" },
  { no: 6, name: "awareness" },
  { no: 7, name: "createDoc" },
  { no: 8, name: "editMode" },
  { no: 9, name: "docCallback" },
  { no: 10, name: "snapshotCallback" },
  { no: 11, name: "updateIdError" },
]);

/**
 * @generated from message main.Connection
 */
export class Connection extends Message<Connection> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: int32 MeetInfoID = 2;
   */
  MeetInfoID = 0;

  /**
   * @generated from field: string UserRoomID = 3;
   */
  UserRoomID = "";

  /**
   * @generated from field: string Name = 4;
   */
  Name = "";

  /**
   * @generated from field: int64 JoinDate = 5;
   */
  JoinDate = protoInt64.zero;

  /**
   * @generated from field: string Status = 6;
   */
  Status = "";

  /**
   * @generated from field: int64 ExitDate = 7;
   */
  ExitDate = protoInt64.zero;

  /**
   * @generated from field: string PanelUserID = 8;
   */
  PanelUserID = "";

  constructor(data?: PartialMessage<Connection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.Connection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "MeetInfoID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "UserRoomID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "JoinDate", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "ExitDate", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "PanelUserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Connection {
    return new Connection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Connection {
    return new Connection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Connection {
    return new Connection().fromJsonString(jsonString, options);
  }

  static equals(a: Connection | PlainMessage<Connection> | undefined, b: Connection | PlainMessage<Connection> | undefined): boolean {
    return proto3.util.equals(Connection, a, b);
  }
}

/**
 * @generated from message main.UserRoom
 */
export class UserRoom extends Message<UserRoom> {
  /**
   * @generated from field: int32 MeetInfoID = 1;
   */
  MeetInfoID = 0;

  /**
   * @generated from field: string UserName = 2;
   */
  UserName = "";

  /**
   * @generated from field: int32 JoinRole = 3;
   */
  JoinRole = 0;

  /**
   * @generated from field: string MeetTitle = 4;
   */
  MeetTitle = "";

  /**
   * @generated from field: string ID = 5;
   */
  ID = "";

  /**
   * @generated from field: string PID = 6;
   */
  PID = "";

  /**
   * @generated from field: int32 IsDelete = 7;
   */
  IsDelete = 0;

  /**
   * @generated from field: int64 InsertDate = 8;
   */
  InsertDate = protoInt64.zero;

  /**
   * @generated from field: bool IsHidden = 9;
   */
  IsHidden = false;

  /**
   * @generated from field: bool Predefined = 10;
   */
  Predefined = false;

  /**
   * @generated from field: bool Block = 11;
   */
  Block = false;

  /**
   * @generated from field: string PermissionStr = 12;
   */
  PermissionStr = "";

  /**
   * @generated from field: string PanelUserID = 13;
   */
  PanelUserID = "";

  /**
   * @generated from field: main.MeetInfo MeetInfo = 14;
   */
  MeetInfo?: MeetInfo;

  /**
   * @generated from field: main.Connection Connection = 15;
   */
  Connection?: Connection;

  /**
   * @generated from field: bool IsRecorder = 16;
   */
  IsRecorder = false;

  /**
   * @generated from field: string RecordType = 17;
   */
  RecordType = "";

  constructor(data?: PartialMessage<UserRoom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.UserRoom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "MeetInfoID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "JoinRole", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "MeetTitle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "PID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "IsDelete", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "InsertDate", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "IsHidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "Predefined", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "Block", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "PermissionStr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "PanelUserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "MeetInfo", kind: "message", T: MeetInfo },
    { no: 15, name: "Connection", kind: "message", T: Connection },
    { no: 16, name: "IsRecorder", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "RecordType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserRoom {
    return new UserRoom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserRoom {
    return new UserRoom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserRoom {
    return new UserRoom().fromJsonString(jsonString, options);
  }

  static equals(a: UserRoom | PlainMessage<UserRoom> | undefined, b: UserRoom | PlainMessage<UserRoom> | undefined): boolean {
    return proto3.util.equals(UserRoom, a, b);
  }
}

/**
 * @generated from message main.MeetInfo
 */
export class MeetInfo extends Message<MeetInfo> {
  /**
   * @generated from field: int32 ID = 1;
   */
  ID = 0;

  /**
   * @generated from field: string UserPass = 2;
   */
  UserPass = "";

  /**
   * @generated from field: bool UserNeedPass = 3;
   */
  UserNeedPass = false;

  /**
   * @generated from field: bool AdminNeedPass = 4;
   */
  AdminNeedPass = false;

  /**
   * @generated from field: string AdminPass = 5;
   */
  AdminPass = "";

  /**
   * @generated from field: string Title = 6;
   */
  Title = "";

  /**
   * @generated from field: int32 UserCount = 7;
   */
  UserCount = 0;

  /**
   * @generated from field: int64 InsertDate = 8;
   */
  InsertDate = protoInt64.zero;

  /**
   * @generated from field: string OwnerID = 9;
   */
  OwnerID = "";

  /**
   * @generated from field: bool IsDelete = 10;
   */
  IsDelete = false;

  /**
   * @generated from field: string PermissionStr = 11;
   */
  PermissionStr = "";

  /**
   * @generated from field: bool DesktopStreamingEnable = 12;
   */
  DesktopStreamingEnable = false;

  /**
   * @generated from field: repeated main.UserRoom UserRooms = 13;
   */
  UserRooms: UserRoom[] = [];

  /**
   * @generated from field: bool RecordEnable = 14;
   */
  RecordEnable = false;

  constructor(data?: PartialMessage<MeetInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.MeetInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "UserPass", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "UserNeedPass", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "AdminNeedPass", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "AdminPass", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "Title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "UserCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "InsertDate", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "OwnerID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "IsDelete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "PermissionStr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "DesktopStreamingEnable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "UserRooms", kind: "message", T: UserRoom, repeated: true },
    { no: 14, name: "RecordEnable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetInfo {
    return new MeetInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetInfo {
    return new MeetInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetInfo {
    return new MeetInfo().fromJsonString(jsonString, options);
  }

  static equals(a: MeetInfo | PlainMessage<MeetInfo> | undefined, b: MeetInfo | PlainMessage<MeetInfo> | undefined): boolean {
    return proto3.util.equals(MeetInfo, a, b);
  }
}

/**
 * @generated from message main.PanelUser
 */
export class PanelUser extends Message<PanelUser> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string Name = 2;
   */
  Name = "";

  /**
   * @generated from field: string UserName = 3;
   */
  UserName = "";

  /**
   * @generated from field: int32 Role = 4;
   */
  Role = 0;

  /**
   * @generated from field: string Password = 5;
   */
  Password = "";

  /**
   * @generated from field: string GUID = 6;
   */
  GUID = "";

  constructor(data?: PartialMessage<PanelUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.PanelUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Role", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "Password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "GUID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PanelUser {
    return new PanelUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PanelUser {
    return new PanelUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PanelUser {
    return new PanelUser().fromJsonString(jsonString, options);
  }

  static equals(a: PanelUser | PlainMessage<PanelUser> | undefined, b: PanelUser | PlainMessage<PanelUser> | undefined): boolean {
    return proto3.util.equals(PanelUser, a, b);
  }
}

/**
 * @generated from message main.Chat
 */
export class Chat extends Message<Chat> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: string user_name = 3;
   */
  userName = "";

  /**
   * @generated from field: string user_id = 4;
   */
  userId = "";

  /**
   * @generated from field: bool isDelete = 5;
   */
  isDelete = false;

  /**
   * @generated from field: int64 insert_time = 6;
   */
  insertTime = protoInt64.zero;

  /**
   * @generated from field: int32 meet_id = 7;
   */
  meetId = 0;

  /**
   * @generated from field: bool isReply = 8;
   */
  isReply = false;

  /**
   * @generated from field: string replyId = 9;
   */
  replyId = "";

  /**
   * @generated from field: string replyText = 10;
   */
  replyText = "";

  /**
   * @generated from field: string to_user_id = 11;
   */
  toUserId = "";

  /**
   * @generated from field: bool is_private = 12;
   */
  isPrivate = false;

  constructor(data?: PartialMessage<Chat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.Chat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "isDelete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "insert_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "meet_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "isReply", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "replyId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "replyText", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "to_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "is_private", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chat {
    return new Chat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJsonString(jsonString, options);
  }

  static equals(a: Chat | PlainMessage<Chat> | undefined, b: Chat | PlainMessage<Chat> | undefined): boolean {
    return proto3.util.equals(Chat, a, b);
  }
}

/**
 * @generated from message main.ChatMessage
 */
export class ChatMessage extends Message<ChatMessage> {
  /**
   * @generated from field: main.ChatMessageType type = 1;
   */
  type = ChatMessageType.new;

  /**
   * @generated from field: main.Chat chat = 2;
   */
  chat?: Chat;

  constructor(data?: PartialMessage<ChatMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ChatMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(ChatMessageType) },
    { no: 2, name: "chat", kind: "message", T: Chat },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessage {
    return new ChatMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessage {
    return new ChatMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessage {
    return new ChatMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessage | PlainMessage<ChatMessage> | undefined, b: ChatMessage | PlainMessage<ChatMessage> | undefined): boolean {
    return proto3.util.equals(ChatMessage, a, b);
  }
}

/**
 * @generated from message main.Permission
 */
export class Permission extends Message<Permission> {
  /**
   * @generated from field: bool video = 1;
   */
  video = false;

  /**
   * @generated from field: bool audio = 2;
   */
  audio = false;

  /**
   * @generated from field: bool screen = 3;
   */
  screen = false;

  /**
   * @generated from field: bool board = 4;
   */
  board = false;

  /**
   * @generated from field: bool file = 5;
   */
  file = false;

  /**
   * @generated from field: bool chat = 6;
   */
  chat = false;

  /**
   * @generated from field: bool player = 7;
   */
  player = false;

  /**
   * @generated from field: bool office = 8;
   */
  office = false;

  constructor(data?: PartialMessage<Permission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.Permission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "audio", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "screen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "board", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "file", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "chat", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "player", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "office", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Permission {
    return new Permission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJsonString(jsonString, options);
  }

  static equals(a: Permission | PlainMessage<Permission> | undefined, b: Permission | PlainMessage<Permission> | undefined): boolean {
    return proto3.util.equals(Permission, a, b);
  }
}

/**
 * @generated from message main.Participant
 */
export class Participant extends Message<Participant> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int32 role = 3;
   */
  role = 0;

  /**
   * @generated from field: main.Permission permission = 4;
   */
  permission?: Permission;

  /**
   * @generated from field: bool raiseHand = 5;
   */
  raiseHand = false;

  /**
   * @generated from field: bool isHidden = 6;
   */
  isHidden = false;

  /**
   * @generated from field: bool IsRecorder = 7;
   */
  IsRecorder = false;

  /**
   * @generated from field: string RecordType = 8;
   */
  RecordType = "";

  constructor(data?: PartialMessage<Participant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.Participant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "permission", kind: "message", T: Permission },
    { no: 5, name: "raiseHand", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "isHidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "IsRecorder", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "RecordType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Participant {
    return new Participant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Participant {
    return new Participant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Participant {
    return new Participant().fromJsonString(jsonString, options);
  }

  static equals(a: Participant | PlainMessage<Participant> | undefined, b: Participant | PlainMessage<Participant> | undefined): boolean {
    return proto3.util.equals(Participant, a, b);
  }
}

/**
 * @generated from message main.FileModel
 */
export class FileModel extends Message<FileModel> {
  /**
   * @generated from field: int32 ID = 1;
   */
  ID = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string ext = 3;
   */
  ext = "";

  /**
   * @generated from field: int32 page_count = 4;
   */
  pageCount = 0;

  /**
   * @generated from field: int32 width = 5;
   */
  width = 0;

  /**
   * @generated from field: int32 height = 6;
   */
  height = 0;

  /**
   * @generated from field: int32 meet_id = 7;
   */
  meetId = 0;

  /**
   * @generated from field: int64 insert_time = 8;
   */
  insertTime = protoInt64.zero;

  /**
   * @generated from field: string pid = 9;
   */
  pid = "";

  /**
   * @generated from field: string server_id = 10;
   */
  serverId = "";

  constructor(data?: PartialMessage<FileModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.FileModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ext", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "width", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "height", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "meet_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "insert_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "pid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileModel {
    return new FileModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileModel {
    return new FileModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileModel {
    return new FileModel().fromJsonString(jsonString, options);
  }

  static equals(a: FileModel | PlainMessage<FileModel> | undefined, b: FileModel | PlainMessage<FileModel> | undefined): boolean {
    return proto3.util.equals(FileModel, a, b);
  }
}

/**
 * @generated from message main.OfficeFile
 */
export class OfficeFile extends Message<OfficeFile> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string pid = 2;
   */
  pid = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string ext = 4;
   */
  ext = "";

  /**
   * @generated from field: int32 meet_id = 5;
   */
  meetId = 0;

  /**
   * @generated from field: int64 insert_time = 6;
   */
  insertTime = protoInt64.zero;

  /**
   * @generated from field: bool deleted = 7;
   */
  deleted = false;

  /**
   * @generated from field: string server_id = 8;
   */
  serverId = "";

  constructor(data?: PartialMessage<OfficeFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.OfficeFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ext", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "meet_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "insert_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OfficeFile {
    return new OfficeFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OfficeFile {
    return new OfficeFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OfficeFile {
    return new OfficeFile().fromJsonString(jsonString, options);
  }

  static equals(a: OfficeFile | PlainMessage<OfficeFile> | undefined, b: OfficeFile | PlainMessage<OfficeFile> | undefined): boolean {
    return proto3.util.equals(OfficeFile, a, b);
  }
}

/**
 * @generated from message main.OfficeFileDto
 */
export class OfficeFileDto extends Message<OfficeFileDto> {
  /**
   * @generated from field: bool enable = 1;
   */
  enable = false;

  /**
   * @generated from field: string office_url = 2;
   */
  officeUrl = "";

  /**
   * @generated from field: map<string, main.OfficeFile> office_file_list = 3;
   */
  officeFileList: { [key: string]: OfficeFile } = {};

  /**
   * @generated from field: string active_file_id = 4;
   */
  activeFileId = "";

  /**
   * @generated from field: string active_file_name = 5;
   */
  activeFileName = "";

  /**
   * @generated from field: string active_file_path = 6;
   */
  activeFilePath = "";

  constructor(data?: PartialMessage<OfficeFileDto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.OfficeFileDto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "office_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "office_file_list", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: OfficeFile} },
    { no: 4, name: "active_file_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "active_file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "active_file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OfficeFileDto {
    return new OfficeFileDto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OfficeFileDto {
    return new OfficeFileDto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OfficeFileDto {
    return new OfficeFileDto().fromJsonString(jsonString, options);
  }

  static equals(a: OfficeFileDto | PlainMessage<OfficeFileDto> | undefined, b: OfficeFileDto | PlainMessage<OfficeFileDto> | undefined): boolean {
    return proto3.util.equals(OfficeFileDto, a, b);
  }
}

/**
 * @generated from message main.VideoPlayerDto
 */
export class VideoPlayerDto extends Message<VideoPlayerDto> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string time = 2;
   */
  time = "";

  /**
   * @generated from field: string admin_id = 3;
   */
  adminId = "";

  /**
   * @generated from field: string admin_name = 4;
   */
  adminName = "";

  /**
   * @generated from field: string status = 5;
   */
  status = "";

  /**
   * @generated from field: string mode = 6;
   */
  mode = "";

  /**
   * @generated from field: bool following = 7;
   */
  following = false;

  constructor(data?: PartialMessage<VideoPlayerDto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.VideoPlayerDto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "admin_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "admin_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "following", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoPlayerDto {
    return new VideoPlayerDto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoPlayerDto {
    return new VideoPlayerDto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoPlayerDto {
    return new VideoPlayerDto().fromJsonString(jsonString, options);
  }

  static equals(a: VideoPlayerDto | PlainMessage<VideoPlayerDto> | undefined, b: VideoPlayerDto | PlainMessage<VideoPlayerDto> | undefined): boolean {
    return proto3.util.equals(VideoPlayerDto, a, b);
  }
}

/**
 * @generated from message main.DesktopStreamingDto
 */
export class DesktopStreamingDto extends Message<DesktopStreamingDto> {
  /**
   * @generated from field: bool enable = 1;
   */
  enable = false;

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  /**
   * @generated from field: repeated string imageList = 3;
   */
  imageList: string[] = [];

  /**
   * @generated from field: bool isActive = 4;
   */
  isActive = false;

  /**
   * @generated from field: string activeImage = 5;
   */
  activeImage = "";

  constructor(data?: PartialMessage<DesktopStreamingDto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.DesktopStreamingDto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "imageList", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "isActive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "activeImage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DesktopStreamingDto {
    return new DesktopStreamingDto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DesktopStreamingDto {
    return new DesktopStreamingDto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DesktopStreamingDto {
    return new DesktopStreamingDto().fromJsonString(jsonString, options);
  }

  static equals(a: DesktopStreamingDto | PlainMessage<DesktopStreamingDto> | undefined, b: DesktopStreamingDto | PlainMessage<DesktopStreamingDto> | undefined): boolean {
    return proto3.util.equals(DesktopStreamingDto, a, b);
  }
}

/**
 * @generated from message main.DesktopStreamMSG
 */
export class DesktopStreamMSG extends Message<DesktopStreamMSG> {
  /**
   * @generated from field: string Action = 1;
   */
  Action = "";

  /**
   * @generated from field: string Image = 2;
   */
  Image = "";

  constructor(data?: PartialMessage<DesktopStreamMSG>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.DesktopStreamMSG";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DesktopStreamMSG {
    return new DesktopStreamMSG().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DesktopStreamMSG {
    return new DesktopStreamMSG().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DesktopStreamMSG {
    return new DesktopStreamMSG().fromJsonString(jsonString, options);
  }

  static equals(a: DesktopStreamMSG | PlainMessage<DesktopStreamMSG> | undefined, b: DesktopStreamMSG | PlainMessage<DesktopStreamMSG> | undefined): boolean {
    return proto3.util.equals(DesktopStreamMSG, a, b);
  }
}

/**
 * @generated from message main.ProfessionalWhiteboardMSG
 */
export class ProfessionalWhiteboardMSG extends Message<ProfessionalWhiteboardMSG> {
  /**
   * @generated from field: main.PwaMessageType type = 1;
   */
  type = PwaMessageType.update;

  /**
   * @generated from field: string doc_id = 2;
   */
  docId = "";

  /**
   * @generated from field: string update = 3;
   */
  update = "";

  /**
   * @generated from field: repeated string updates = 4;
   */
  updates: string[] = [];

  /**
   * @generated from field: string sender = 5;
   */
  sender = "";

  /**
   * @generated from field: string edit_mode = 6;
   */
  editMode = "";

  /**
   * @generated from field: int32 doc_count = 7;
   */
  docCount = 0;

  /**
   * @generated from field: int32 file_id = 8;
   */
  fileId = 0;

  /**
   * @generated from field: int32 updateId = 9;
   */
  updateId = 0;

  /**
   * @generated from field: repeated uint32 update32 = 10;
   */
  update32: number[] = [];

  /**
   * @generated from field: repeated main.ArrayOfUint32 updates32 = 11;
   */
  updates32: ArrayOfUint32[] = [];

  constructor(data?: PartialMessage<ProfessionalWhiteboardMSG>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ProfessionalWhiteboardMSG";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(PwaMessageType) },
    { no: 2, name: "doc_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "update", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "updates", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "edit_mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "doc_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "file_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "updateId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "update32", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 11, name: "updates32", kind: "message", T: ArrayOfUint32, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfessionalWhiteboardMSG {
    return new ProfessionalWhiteboardMSG().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfessionalWhiteboardMSG {
    return new ProfessionalWhiteboardMSG().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfessionalWhiteboardMSG {
    return new ProfessionalWhiteboardMSG().fromJsonString(jsonString, options);
  }

  static equals(a: ProfessionalWhiteboardMSG | PlainMessage<ProfessionalWhiteboardMSG> | undefined, b: ProfessionalWhiteboardMSG | PlainMessage<ProfessionalWhiteboardMSG> | undefined): boolean {
    return proto3.util.equals(ProfessionalWhiteboardMSG, a, b);
  }
}

/**
 * @generated from message main.ArrayOfUint32
 */
export class ArrayOfUint32 extends Message<ArrayOfUint32> {
  /**
   * @generated from field: repeated uint32 myArray = 1;
   */
  myArray: number[] = [];

  constructor(data?: PartialMessage<ArrayOfUint32>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ArrayOfUint32";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "myArray", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArrayOfUint32 {
    return new ArrayOfUint32().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArrayOfUint32 {
    return new ArrayOfUint32().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArrayOfUint32 {
    return new ArrayOfUint32().fromJsonString(jsonString, options);
  }

  static equals(a: ArrayOfUint32 | PlainMessage<ArrayOfUint32> | undefined, b: ArrayOfUint32 | PlainMessage<ArrayOfUint32> | undefined): boolean {
    return proto3.util.equals(ArrayOfUint32, a, b);
  }
}

/**
 * @generated from message main.ClientConfig
 */
export class ClientConfig extends Message<ClientConfig> {
  /**
   * @generated from field: int32 maxUploadFileSize = 1;
   */
  maxUploadFileSize = 0;

  /**
   * @generated from field: int32 maxOfficeUploadFileSize = 2;
   */
  maxOfficeUploadFileSize = 0;

  /**
   * @generated from field: int32 maxPwaUploadFileSize = 3;
   */
  maxPwaUploadFileSize = 0;

  /**
   * @generated from field: bool OfficeToPdfConvert = 4;
   */
  OfficeToPdfConvert = false;

  /**
   * @generated from field: bool ExternalFileServer = 5;
   */
  ExternalFileServer = false;

  /**
   * @generated from field: string ExternalFileServerUrl = 6;
   */
  ExternalFileServerUrl = "";

  /**
   * @generated from field: bool ExternalOfficeFileServer = 7;
   */
  ExternalOfficeFileServer = false;

  constructor(data?: PartialMessage<ClientConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.ClientConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "maxUploadFileSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "maxOfficeUploadFileSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "maxPwaUploadFileSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "OfficeToPdfConvert", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "ExternalFileServer", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "ExternalFileServerUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "ExternalOfficeFileServer", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientConfig {
    return new ClientConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientConfig {
    return new ClientConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientConfig {
    return new ClientConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ClientConfig | PlainMessage<ClientConfig> | undefined, b: ClientConfig | PlainMessage<ClientConfig> | undefined): boolean {
    return proto3.util.equals(ClientConfig, a, b);
  }
}

