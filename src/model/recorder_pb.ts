// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file recorder.proto (package main, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message main.RecorderState
 */
export class RecorderState extends Message<RecorderState> {
  /**
   * @generated from field: bool Enable = 1;
   */
  Enable = false;

  /**
   * @generated from field: bool IsActive = 2;
   */
  IsActive = false;

  /**
   * @generated from field: string RtmpServer = 3;
   */
  RtmpServer = "";

  constructor(data?: PartialMessage<RecorderState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.RecorderState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Enable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "IsActive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "RtmpServer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecorderState {
    return new RecorderState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecorderState {
    return new RecorderState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecorderState {
    return new RecorderState().fromJsonString(jsonString, options);
  }

  static equals(a: RecorderState | PlainMessage<RecorderState> | undefined, b: RecorderState | PlainMessage<RecorderState> | undefined): boolean {
    return proto3.util.equals(RecorderState, a, b);
  }
}

/**
 * @generated from message main.RecorderRequest
 */
export class RecorderRequest extends Message<RecorderRequest> {
  /**
   * @generated from field: string Action = 1;
   */
  Action = "";

  /**
   * @generated from field: string Type = 2;
   */
  Type = "";

  /**
   * @generated from field: string RtmpUrl = 3;
   */
  RtmpUrl = "";

  constructor(data?: PartialMessage<RecorderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.RecorderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "RtmpUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecorderRequest {
    return new RecorderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecorderRequest {
    return new RecorderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecorderRequest {
    return new RecorderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecorderRequest | PlainMessage<RecorderRequest> | undefined, b: RecorderRequest | PlainMessage<RecorderRequest> | undefined): boolean {
    return proto3.util.equals(RecorderRequest, a, b);
  }
}

/**
 * @generated from message main.RecordDbItem
 */
export class RecordDbItem extends Message<RecordDbItem> {
  /**
   * @generated from field: int32 ID = 1;
   */
  ID = 0;

  /**
   * @generated from field: int32 MeetId = 2;
   */
  MeetId = 0;

  /**
   * @generated from field: string FileName = 3;
   */
  FileName = "";

  /**
   * @generated from field: int64 InsertTime = 4;
   */
  InsertTime = protoInt64.zero;

  /**
   * @generated from field: bool IsDelete = 5;
   */
  IsDelete = false;

  /**
   * @generated from field: int32 Duration = 6;
   */
  Duration = 0;

  /**
   * @generated from field: string UserId = 7;
   */
  UserId = "";

  /**
   * @generated from field: int32 Completed = 8;
   */
  Completed = 0;

  /**
   * @generated from field: int64 CompletedTime = 9;
   */
  CompletedTime = protoInt64.zero;

  /**
   * @generated from field: string PanelUserID = 10;
   */
  PanelUserID = "";

  /**
   * @generated from field: string type = 11;
   */
  type = "";

  constructor(data?: PartialMessage<RecordDbItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.RecordDbItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "MeetId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "FileName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "InsertTime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "IsDelete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "Duration", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "UserId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "Completed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "CompletedTime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "PanelUserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordDbItem {
    return new RecordDbItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordDbItem {
    return new RecordDbItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordDbItem {
    return new RecordDbItem().fromJsonString(jsonString, options);
  }

  static equals(a: RecordDbItem | PlainMessage<RecordDbItem> | undefined, b: RecordDbItem | PlainMessage<RecordDbItem> | undefined): boolean {
    return proto3.util.equals(RecordDbItem, a, b);
  }
}

