// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file messaging.proto (package main, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Chat, ChatMessage, ClientConfig, DesktopStreamingDto, DesktopStreamMSG, FileModel, OfficeFile, OfficeFileDto, Participant, Permission, ProfessionalWhiteboardMSG, VideoPlayerDto } from "./model_pb.js";
import { QuizModel, QuizQuestionModel, QuizShowResult, QuizUserAnswerRequest, QuizUserAnswerResponse, QuizUtils } from "./quiz_pb.js";
import { RecorderRequest, RecorderState } from "./recorder_pb.js";

/**
 * @generated from enum main.ActivePanelType
 */
export enum ActivePanelType {
  /**
   * @generated from enum value: Whiteboard = 0;
   */
  Whiteboard = 0,

  /**
   * @generated from enum value: Conference = 1;
   */
  Conference = 1,

  /**
   * @generated from enum value: ScreenShare = 2;
   */
  ScreenShare = 2,

  /**
   * @generated from enum value: Office = 3;
   */
  Office = 3,

  /**
   * @generated from enum value: Player = 4;
   */
  Player = 4,

  /**
   * @generated from enum value: DesktopStreaming = 5;
   */
  DesktopStreaming = 5,

  /**
   * @generated from enum value: ProfessionalWhiteboard = 6;
   */
  ProfessionalWhiteboard = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(ActivePanelType)
proto3.util.setEnumType(ActivePanelType, "main.ActivePanelType", [
  { no: 0, name: "Whiteboard" },
  { no: 1, name: "Conference" },
  { no: 2, name: "ScreenShare" },
  { no: 3, name: "Office" },
  { no: 4, name: "Player" },
  { no: 5, name: "DesktopStreaming" },
  { no: 6, name: "ProfessionalWhiteboard" },
]);

/**
 * @generated from enum main.MeetControlType
 */
export enum MeetControlType {
  /**
   * @generated from enum value: Reload = 0;
   */
  Reload = 0,

  /**
   * @generated from enum value: Exit = 1;
   */
  Exit = 1,

  /**
   * @generated from enum value: End = 2;
   */
  End = 2,

  /**
   * @generated from enum value: Disconnect = 3;
   */
  Disconnect = 3,

  /**
   * @generated from enum value: UserCountLimitErr = 4;
   */
  UserCountLimitErr = 4,

  /**
   * @generated from enum value: UserNotFound = 5;
   */
  UserNotFound = 5,

  /**
   * @generated from enum value: ExistUser = 6;
   */
  ExistUser = 6,

  /**
   * @generated from enum value: BlockUserMsg = 7;
   */
  BlockUserMsg = 7,

  /**
   * @generated from enum value: MeetIsDelete = 8;
   */
  MeetIsDelete = 8,
}
// Retrieve enum metadata with: proto3.getEnumType(MeetControlType)
proto3.util.setEnumType(MeetControlType, "main.MeetControlType", [
  { no: 0, name: "Reload" },
  { no: 1, name: "Exit" },
  { no: 2, name: "End" },
  { no: 3, name: "Disconnect" },
  { no: 4, name: "UserCountLimitErr" },
  { no: 5, name: "UserNotFound" },
  { no: 6, name: "ExistUser" },
  { no: 7, name: "BlockUserMsg" },
  { no: 8, name: "MeetIsDelete" },
]);

/**
 * @generated from message main.MessageRequest
 */
export class MessageRequest extends Message<MessageRequest> {
  /**
   * @generated from oneof main.MessageRequest.message
   */
  message: {
    /**
     * @generated from field: main.SetPermission set_permission = 1;
     */
    value: SetPermission;
    case: "setPermission";
  } | {
    /**
     * @generated from field: main.RemoveUserRequest remove_user = 2;
     */
    value: RemoveUserRequest;
    case: "removeUser";
  } | {
    /**
     * @generated from field: main.ChatMessage chatMessage = 3;
     */
    value: ChatMessage;
    case: "chatMessage";
  } | {
    /**
     * @generated from field: main.QuizQuestionModel quiz_create = 4;
     */
    value: QuizQuestionModel;
    case: "quizCreate";
  } | {
    /**
     * @generated from field: main.QuizUserAnswerRequest quiz_answer = 5;
     */
    value: QuizUserAnswerRequest;
    case: "quizAnswer";
  } | {
    /**
     * @generated from field: main.QuizShowResult quiz_show_result = 6;
     */
    value: QuizShowResult;
    case: "quizShowResult";
  } | {
    /**
     * @generated from field: main.PanelController panel_controller = 7;
     */
    value: PanelController;
    case: "panelController";
  } | {
    /**
     * @generated from field: main.RaiseHand raise_hand = 8;
     */
    value: RaiseHand;
    case: "raiseHand";
  } | {
    /**
     * @generated from field: main.EndMeet end_meet = 9;
     */
    value: EndMeet;
    case: "endMeet";
  } | {
    /**
     * @generated from field: main.BlockUser block_user = 10;
     */
    value: BlockUser;
    case: "blockUser";
  } | {
    /**
     * @generated from field: main.OfficeFileSelectRequest office_file_select = 11;
     */
    value: OfficeFileSelectRequest;
    case: "officeFileSelect";
  } | {
    /**
     * @generated from field: main.VideoPlayerStatus VideoPlayerStatus = 12;
     */
    value: VideoPlayerStatus;
    case: "VideoPlayerStatus";
  } | {
    /**
     * @generated from field: main.VideoPlayerDto VideoPlayerDto = 13;
     */
    value: VideoPlayerDto;
    case: "VideoPlayerDto";
  } | {
    /**
     * @generated from field: main.ProfessionalWhiteboardMSG ProfessionalWhiteboard = 14;
     */
    value: ProfessionalWhiteboardMSG;
    case: "ProfessionalWhiteboard";
  } | {
    /**
     * @generated from field: main.QuizUtils QuizUtils = 15;
     */
    value: QuizUtils;
    case: "QuizUtils";
  } | {
    /**
     * @generated from field: main.RecorderRequest RecorderRequest = 16;
     */
    value: RecorderRequest;
    case: "RecorderRequest";
  } | {
    /**
     * @generated from field: main.DesktopStreamMSG DesktopStreamMSG = 17;
     */
    value: DesktopStreamMSG;
    case: "DesktopStreamMSG";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.MessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "set_permission", kind: "message", T: SetPermission, oneof: "message" },
    { no: 2, name: "remove_user", kind: "message", T: RemoveUserRequest, oneof: "message" },
    { no: 3, name: "chatMessage", kind: "message", T: ChatMessage, oneof: "message" },
    { no: 4, name: "quiz_create", kind: "message", T: QuizQuestionModel, oneof: "message" },
    { no: 5, name: "quiz_answer", kind: "message", T: QuizUserAnswerRequest, oneof: "message" },
    { no: 6, name: "quiz_show_result", kind: "message", T: QuizShowResult, oneof: "message" },
    { no: 7, name: "panel_controller", kind: "message", T: PanelController, oneof: "message" },
    { no: 8, name: "raise_hand", kind: "message", T: RaiseHand, oneof: "message" },
    { no: 9, name: "end_meet", kind: "message", T: EndMeet, oneof: "message" },
    { no: 10, name: "block_user", kind: "message", T: BlockUser, oneof: "message" },
    { no: 11, name: "office_file_select", kind: "message", T: OfficeFileSelectRequest, oneof: "message" },
    { no: 12, name: "VideoPlayerStatus", kind: "message", T: VideoPlayerStatus, oneof: "message" },
    { no: 13, name: "VideoPlayerDto", kind: "message", T: VideoPlayerDto, oneof: "message" },
    { no: 14, name: "ProfessionalWhiteboard", kind: "message", T: ProfessionalWhiteboardMSG, oneof: "message" },
    { no: 15, name: "QuizUtils", kind: "message", T: QuizUtils, oneof: "message" },
    { no: 16, name: "RecorderRequest", kind: "message", T: RecorderRequest, oneof: "message" },
    { no: 17, name: "DesktopStreamMSG", kind: "message", T: DesktopStreamMSG, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageRequest {
    return new MessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageRequest {
    return new MessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageRequest {
    return new MessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MessageRequest | PlainMessage<MessageRequest> | undefined, b: MessageRequest | PlainMessage<MessageRequest> | undefined): boolean {
    return proto3.util.equals(MessageRequest, a, b);
  }
}

/**
 * @generated from message main.MessageResponse
 */
export class MessageResponse extends Message<MessageResponse> {
  /**
   * @generated from oneof main.MessageResponse.message
   */
  message: {
    /**
     * @generated from field: main.SetPermission set_permission = 1;
     */
    value: SetPermission;
    case: "setPermission";
  } | {
    /**
     * @generated from field: main.RemoveUserResponse remove_user = 2;
     */
    value: RemoveUserResponse;
    case: "removeUser";
  } | {
    /**
     * @generated from field: main.ChatMessage chatMessage = 3;
     */
    value: ChatMessage;
    case: "chatMessage";
  } | {
    /**
     * @generated from field: main.NewParticipant new_participant = 4;
     */
    value: NewParticipant;
    case: "newParticipant";
  } | {
    /**
     * @generated from field: main.MeetStatus meet_status = 5;
     */
    value: MeetStatus;
    case: "meetStatus";
  } | {
    /**
     * @generated from field: main.FileListResponse file_list = 6;
     */
    value: FileListResponse;
    case: "fileList";
  } | {
    /**
     * @generated from field: main.QuizQuestionModel quiz_create = 7;
     */
    value: QuizQuestionModel;
    case: "quizCreate";
  } | {
    /**
     * @generated from field: main.QuizUserAnswerResponse quiz_answer = 8;
     */
    value: QuizUserAnswerResponse;
    case: "quizAnswer";
  } | {
    /**
     * @generated from field: main.QuizShowResult quiz_show_result = 9;
     */
    value: QuizShowResult;
    case: "quizShowResult";
  } | {
    /**
     * @generated from field: main.PanelController panel_controller = 10;
     */
    value: PanelController;
    case: "panelController";
  } | {
    /**
     * @generated from field: main.RaiseHand raise_hand = 11;
     */
    value: RaiseHand;
    case: "raiseHand";
  } | {
    /**
     * @generated from field: main.MeetControl meet_control = 12;
     */
    value: MeetControl;
    case: "meetControl";
  } | {
    /**
     * @generated from field: main.OfficeFileSelectResponse office_file_select = 13;
     */
    value: OfficeFileSelectResponse;
    case: "officeFileSelect";
  } | {
    /**
     * @generated from field: main.OfficeFileListResponse office_file_list = 14;
     */
    value: OfficeFileListResponse;
    case: "officeFileList";
  } | {
    /**
     * @generated from field: main.VideoPlayerStatus VideoPlayerStatus = 15;
     */
    value: VideoPlayerStatus;
    case: "VideoPlayerStatus";
  } | {
    /**
     * @generated from field: main.VideoPlayerDto VideoPlayerDto = 16;
     */
    value: VideoPlayerDto;
    case: "VideoPlayerDto";
  } | {
    /**
     * @generated from field: main.ProfessionalWhiteboardMSG ProfessionalWhiteboard = 17;
     */
    value: ProfessionalWhiteboardMSG;
    case: "ProfessionalWhiteboard";
  } | {
    /**
     * @generated from field: main.QuizUtils QuizUtils = 18;
     */
    value: QuizUtils;
    case: "QuizUtils";
  } | {
    /**
     * @generated from field: main.DesktopStreamMSG DesktopStreamMSG = 19;
     */
    value: DesktopStreamMSG;
    case: "DesktopStreamMSG";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.MessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "set_permission", kind: "message", T: SetPermission, oneof: "message" },
    { no: 2, name: "remove_user", kind: "message", T: RemoveUserResponse, oneof: "message" },
    { no: 3, name: "chatMessage", kind: "message", T: ChatMessage, oneof: "message" },
    { no: 4, name: "new_participant", kind: "message", T: NewParticipant, oneof: "message" },
    { no: 5, name: "meet_status", kind: "message", T: MeetStatus, oneof: "message" },
    { no: 6, name: "file_list", kind: "message", T: FileListResponse, oneof: "message" },
    { no: 7, name: "quiz_create", kind: "message", T: QuizQuestionModel, oneof: "message" },
    { no: 8, name: "quiz_answer", kind: "message", T: QuizUserAnswerResponse, oneof: "message" },
    { no: 9, name: "quiz_show_result", kind: "message", T: QuizShowResult, oneof: "message" },
    { no: 10, name: "panel_controller", kind: "message", T: PanelController, oneof: "message" },
    { no: 11, name: "raise_hand", kind: "message", T: RaiseHand, oneof: "message" },
    { no: 12, name: "meet_control", kind: "message", T: MeetControl, oneof: "message" },
    { no: 13, name: "office_file_select", kind: "message", T: OfficeFileSelectResponse, oneof: "message" },
    { no: 14, name: "office_file_list", kind: "message", T: OfficeFileListResponse, oneof: "message" },
    { no: 15, name: "VideoPlayerStatus", kind: "message", T: VideoPlayerStatus, oneof: "message" },
    { no: 16, name: "VideoPlayerDto", kind: "message", T: VideoPlayerDto, oneof: "message" },
    { no: 17, name: "ProfessionalWhiteboard", kind: "message", T: ProfessionalWhiteboardMSG, oneof: "message" },
    { no: 18, name: "QuizUtils", kind: "message", T: QuizUtils, oneof: "message" },
    { no: 19, name: "DesktopStreamMSG", kind: "message", T: DesktopStreamMSG, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageResponse {
    return new MessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageResponse {
    return new MessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageResponse {
    return new MessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MessageResponse | PlainMessage<MessageResponse> | undefined, b: MessageResponse | PlainMessage<MessageResponse> | undefined): boolean {
    return proto3.util.equals(MessageResponse, a, b);
  }
}

/**
 * @generated from message main.MeetStatus
 */
export class MeetStatus extends Message<MeetStatus> {
  /**
   * @generated from field: main.Participant participant = 1;
   */
  participant?: Participant;

  /**
   * @generated from field: string token = 2;
   */
  token = "";

  /**
   * @generated from field: string meet_title = 3;
   */
  meetTitle = "";

  /**
   * @generated from field: map<string, main.Participant> user_list = 4;
   */
  userList: { [key: string]: Participant } = {};

  /**
   * @generated from field: map<string, main.Chat> chat_list = 5;
   */
  chatList: { [key: string]: Chat } = {};

  /**
   * @generated from field: main.ActivePanelType active_panel = 6;
   */
  activePanel = ActivePanelType.Whiteboard;

  /**
   * @generated from field: string media_server = 7;
   */
  mediaServer = "";

  /**
   * @generated from field: map<int32, main.FileModel> file_list = 8;
   */
  fileList: { [key: number]: FileModel } = {};

  /**
   * @generated from field: int32 meet_id = 9;
   */
  meetId = 0;

  /**
   * @generated from field: main.QuizModel quiz = 10;
   */
  quiz?: QuizModel;

  /**
   * @generated from field: main.Permission permission = 11;
   */
  permission?: Permission;

  /**
   * @generated from field: main.OfficeFileDto OfficeFileDto = 12;
   */
  OfficeFileDto?: OfficeFileDto;

  /**
   * @generated from field: main.VideoPlayerDto VideoPlayerDto = 13;
   */
  VideoPlayerDto?: VideoPlayerDto;

  /**
   * @generated from field: main.DesktopStreamingDto DesktopStreamingDto = 14;
   */
  DesktopStreamingDto?: DesktopStreamingDto;

  /**
   * @generated from field: map<string, main.Chat> private_chat_list = 15;
   */
  privateChatList: { [key: string]: Chat } = {};

  /**
   * @generated from field: main.ClientConfig ClientConfig = 16;
   */
  ClientConfig?: ClientConfig;

  /**
   * @generated from field: main.RecorderState RecorderState = 17;
   */
  RecorderState?: RecorderState;

  constructor(data?: PartialMessage<MeetStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.MeetStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant", kind: "message", T: Participant },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "meet_title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_list", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Participant} },
    { no: 5, name: "chat_list", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Chat} },
    { no: 6, name: "active_panel", kind: "enum", T: proto3.getEnumType(ActivePanelType) },
    { no: 7, name: "media_server", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "file_list", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: FileModel} },
    { no: 9, name: "meet_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "quiz", kind: "message", T: QuizModel },
    { no: 11, name: "permission", kind: "message", T: Permission },
    { no: 12, name: "OfficeFileDto", kind: "message", T: OfficeFileDto },
    { no: 13, name: "VideoPlayerDto", kind: "message", T: VideoPlayerDto },
    { no: 14, name: "DesktopStreamingDto", kind: "message", T: DesktopStreamingDto },
    { no: 15, name: "private_chat_list", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Chat} },
    { no: 16, name: "ClientConfig", kind: "message", T: ClientConfig },
    { no: 17, name: "RecorderState", kind: "message", T: RecorderState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetStatus {
    return new MeetStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetStatus {
    return new MeetStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetStatus {
    return new MeetStatus().fromJsonString(jsonString, options);
  }

  static equals(a: MeetStatus | PlainMessage<MeetStatus> | undefined, b: MeetStatus | PlainMessage<MeetStatus> | undefined): boolean {
    return proto3.util.equals(MeetStatus, a, b);
  }
}

/**
 * @generated from message main.RaiseHand
 */
export class RaiseHand extends Message<RaiseHand> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<RaiseHand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.RaiseHand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RaiseHand {
    return new RaiseHand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RaiseHand {
    return new RaiseHand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RaiseHand {
    return new RaiseHand().fromJsonString(jsonString, options);
  }

  static equals(a: RaiseHand | PlainMessage<RaiseHand> | undefined, b: RaiseHand | PlainMessage<RaiseHand> | undefined): boolean {
    return proto3.util.equals(RaiseHand, a, b);
  }
}

/**
 * @generated from message main.PanelController
 */
export class PanelController extends Message<PanelController> {
  /**
   * @generated from field: main.ActivePanelType active_panel = 1;
   */
  activePanel = ActivePanelType.Whiteboard;

  constructor(data?: PartialMessage<PanelController>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.PanelController";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "active_panel", kind: "enum", T: proto3.getEnumType(ActivePanelType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PanelController {
    return new PanelController().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PanelController {
    return new PanelController().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PanelController {
    return new PanelController().fromJsonString(jsonString, options);
  }

  static equals(a: PanelController | PlainMessage<PanelController> | undefined, b: PanelController | PlainMessage<PanelController> | undefined): boolean {
    return proto3.util.equals(PanelController, a, b);
  }
}

/**
 * @generated from message main.EndMeet
 */
export class EndMeet extends Message<EndMeet> {
  constructor(data?: PartialMessage<EndMeet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.EndMeet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndMeet {
    return new EndMeet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndMeet {
    return new EndMeet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndMeet {
    return new EndMeet().fromJsonString(jsonString, options);
  }

  static equals(a: EndMeet | PlainMessage<EndMeet> | undefined, b: EndMeet | PlainMessage<EndMeet> | undefined): boolean {
    return proto3.util.equals(EndMeet, a, b);
  }
}

/**
 * @generated from message main.MeetControl
 */
export class MeetControl extends Message<MeetControl> {
  /**
   * @generated from field: main.MeetControlType meet_control = 1;
   */
  meetControl = MeetControlType.Reload;

  constructor(data?: PartialMessage<MeetControl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.MeetControl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meet_control", kind: "enum", T: proto3.getEnumType(MeetControlType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetControl {
    return new MeetControl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetControl {
    return new MeetControl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetControl {
    return new MeetControl().fromJsonString(jsonString, options);
  }

  static equals(a: MeetControl | PlainMessage<MeetControl> | undefined, b: MeetControl | PlainMessage<MeetControl> | undefined): boolean {
    return proto3.util.equals(MeetControl, a, b);
  }
}

/**
 * @generated from message main.FileListResponse
 */
export class FileListResponse extends Message<FileListResponse> {
  /**
   * @generated from field: map<int32, main.FileModel> file_list = 1;
   */
  fileList: { [key: number]: FileModel } = {};

  constructor(data?: PartialMessage<FileListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.FileListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_list", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: FileModel} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileListResponse {
    return new FileListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileListResponse {
    return new FileListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileListResponse {
    return new FileListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FileListResponse | PlainMessage<FileListResponse> | undefined, b: FileListResponse | PlainMessage<FileListResponse> | undefined): boolean {
    return proto3.util.equals(FileListResponse, a, b);
  }
}

/**
 * @generated from message main.OfficeFileListResponse
 */
export class OfficeFileListResponse extends Message<OfficeFileListResponse> {
  /**
   * @generated from field: map<string, main.OfficeFile> file_list = 1;
   */
  fileList: { [key: string]: OfficeFile } = {};

  constructor(data?: PartialMessage<OfficeFileListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.OfficeFileListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_list", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: OfficeFile} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OfficeFileListResponse {
    return new OfficeFileListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OfficeFileListResponse {
    return new OfficeFileListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OfficeFileListResponse {
    return new OfficeFileListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OfficeFileListResponse | PlainMessage<OfficeFileListResponse> | undefined, b: OfficeFileListResponse | PlainMessage<OfficeFileListResponse> | undefined): boolean {
    return proto3.util.equals(OfficeFileListResponse, a, b);
  }
}

/**
 * @generated from message main.OfficeFileSelectRequest
 */
export class OfficeFileSelectRequest extends Message<OfficeFileSelectRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<OfficeFileSelectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.OfficeFileSelectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OfficeFileSelectRequest {
    return new OfficeFileSelectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OfficeFileSelectRequest {
    return new OfficeFileSelectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OfficeFileSelectRequest {
    return new OfficeFileSelectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OfficeFileSelectRequest | PlainMessage<OfficeFileSelectRequest> | undefined, b: OfficeFileSelectRequest | PlainMessage<OfficeFileSelectRequest> | undefined): boolean {
    return proto3.util.equals(OfficeFileSelectRequest, a, b);
  }
}

/**
 * @generated from message main.OfficeFileSelectResponse
 */
export class OfficeFileSelectResponse extends Message<OfficeFileSelectResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string path = 3;
   */
  path = "";

  constructor(data?: PartialMessage<OfficeFileSelectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.OfficeFileSelectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OfficeFileSelectResponse {
    return new OfficeFileSelectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OfficeFileSelectResponse {
    return new OfficeFileSelectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OfficeFileSelectResponse {
    return new OfficeFileSelectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OfficeFileSelectResponse | PlainMessage<OfficeFileSelectResponse> | undefined, b: OfficeFileSelectResponse | PlainMessage<OfficeFileSelectResponse> | undefined): boolean {
    return proto3.util.equals(OfficeFileSelectResponse, a, b);
  }
}

/**
 * message Board{
 *  oneof message{
 *    BoardUpdate update = 1;
 *    BoardPageSelect page_select = 2;
 *  }
 * }
 *
 * @generated from message main.SetPermission
 */
export class SetPermission extends Message<SetPermission> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: main.Permission permission = 3;
   */
  permission?: Permission;

  constructor(data?: PartialMessage<SetPermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.SetPermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "permission", kind: "message", T: Permission },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPermission {
    return new SetPermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPermission {
    return new SetPermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPermission {
    return new SetPermission().fromJsonString(jsonString, options);
  }

  static equals(a: SetPermission | PlainMessage<SetPermission> | undefined, b: SetPermission | PlainMessage<SetPermission> | undefined): boolean {
    return proto3.util.equals(SetPermission, a, b);
  }
}

/**
 * @generated from message main.BlockUser
 */
export class BlockUser extends Message<BlockUser> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<BlockUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.BlockUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockUser {
    return new BlockUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockUser {
    return new BlockUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockUser {
    return new BlockUser().fromJsonString(jsonString, options);
  }

  static equals(a: BlockUser | PlainMessage<BlockUser> | undefined, b: BlockUser | PlainMessage<BlockUser> | undefined): boolean {
    return proto3.util.equals(BlockUser, a, b);
  }
}

/**
 * @generated from message main.RaiseHandResponse
 */
export class RaiseHandResponse extends Message<RaiseHandResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<RaiseHandResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.RaiseHandResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RaiseHandResponse {
    return new RaiseHandResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RaiseHandResponse {
    return new RaiseHandResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RaiseHandResponse {
    return new RaiseHandResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RaiseHandResponse | PlainMessage<RaiseHandResponse> | undefined, b: RaiseHandResponse | PlainMessage<RaiseHandResponse> | undefined): boolean {
    return proto3.util.equals(RaiseHandResponse, a, b);
  }
}

/**
 * @generated from message main.RemoveUserRequest
 */
export class RemoveUserRequest extends Message<RemoveUserRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<RemoveUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.RemoveUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveUserRequest {
    return new RemoveUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveUserRequest {
    return new RemoveUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveUserRequest {
    return new RemoveUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveUserRequest | PlainMessage<RemoveUserRequest> | undefined, b: RemoveUserRequest | PlainMessage<RemoveUserRequest> | undefined): boolean {
    return proto3.util.equals(RemoveUserRequest, a, b);
  }
}

/**
 * @generated from message main.NewParticipant
 */
export class NewParticipant extends Message<NewParticipant> {
  /**
   * @generated from field: main.Participant participant = 1;
   */
  participant?: Participant;

  constructor(data?: PartialMessage<NewParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.NewParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant", kind: "message", T: Participant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewParticipant {
    return new NewParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewParticipant {
    return new NewParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewParticipant {
    return new NewParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: NewParticipant | PlainMessage<NewParticipant> | undefined, b: NewParticipant | PlainMessage<NewParticipant> | undefined): boolean {
    return proto3.util.equals(NewParticipant, a, b);
  }
}

/**
 * @generated from message main.RemoveUserResponse
 */
export class RemoveUserResponse extends Message<RemoveUserResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<RemoveUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.RemoveUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveUserResponse {
    return new RemoveUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveUserResponse {
    return new RemoveUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveUserResponse {
    return new RemoveUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveUserResponse | PlainMessage<RemoveUserResponse> | undefined, b: RemoveUserResponse | PlainMessage<RemoveUserResponse> | undefined): boolean {
    return proto3.util.equals(RemoveUserResponse, a, b);
  }
}

/**
 * @generated from message main.SetPermissionResponse
 */
export class SetPermissionResponse extends Message<SetPermissionResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<SetPermissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.SetPermissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPermissionResponse {
    return new SetPermissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPermissionResponse {
    return new SetPermissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPermissionResponse {
    return new SetPermissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetPermissionResponse | PlainMessage<SetPermissionResponse> | undefined, b: SetPermissionResponse | PlainMessage<SetPermissionResponse> | undefined): boolean {
    return proto3.util.equals(SetPermissionResponse, a, b);
  }
}

/**
 * @generated from message main.VideoPlayerStatus
 */
export class VideoPlayerStatus extends Message<VideoPlayerStatus> {
  /**
   * @generated from field: string time = 1;
   */
  time = "";

  /**
   * @generated from field: string action = 2;
   */
  action = "";

  /**
   * @generated from field: string mode = 3;
   */
  mode = "";

  /**
   * @generated from field: string adminid = 4;
   */
  adminid = "";

  constructor(data?: PartialMessage<VideoPlayerStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.VideoPlayerStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "adminid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoPlayerStatus {
    return new VideoPlayerStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoPlayerStatus {
    return new VideoPlayerStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoPlayerStatus {
    return new VideoPlayerStatus().fromJsonString(jsonString, options);
  }

  static equals(a: VideoPlayerStatus | PlainMessage<VideoPlayerStatus> | undefined, b: VideoPlayerStatus | PlainMessage<VideoPlayerStatus> | undefined): boolean {
    return proto3.util.equals(VideoPlayerStatus, a, b);
  }
}

/**
 * @generated from message main.UserManagerRaiseHand
 */
export class UserManagerRaiseHand extends Message<UserManagerRaiseHand> {
  constructor(data?: PartialMessage<UserManagerRaiseHand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.UserManagerRaiseHand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserManagerRaiseHand {
    return new UserManagerRaiseHand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserManagerRaiseHand {
    return new UserManagerRaiseHand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserManagerRaiseHand {
    return new UserManagerRaiseHand().fromJsonString(jsonString, options);
  }

  static equals(a: UserManagerRaiseHand | PlainMessage<UserManagerRaiseHand> | undefined, b: UserManagerRaiseHand | PlainMessage<UserManagerRaiseHand> | undefined): boolean {
    return proto3.util.equals(UserManagerRaiseHand, a, b);
  }
}

/**
 * @generated from message main.UserManagerRemove
 */
export class UserManagerRemove extends Message<UserManagerRemove> {
  constructor(data?: PartialMessage<UserManagerRemove>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "main.UserManagerRemove";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserManagerRemove {
    return new UserManagerRemove().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserManagerRemove {
    return new UserManagerRemove().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserManagerRemove {
    return new UserManagerRemove().fromJsonString(jsonString, options);
  }

  static equals(a: UserManagerRemove | PlainMessage<UserManagerRemove> | undefined, b: UserManagerRemove | PlainMessage<UserManagerRemove> | undefined): boolean {
    return proto3.util.equals(UserManagerRemove, a, b);
  }
}

